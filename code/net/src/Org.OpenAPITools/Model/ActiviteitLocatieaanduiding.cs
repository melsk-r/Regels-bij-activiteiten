/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een regel voor iedereen normeert (stelt regels over) een activiteit.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract]
    public partial class ActiviteitLocatieaanduiding :  IEquatable<ActiviteitLocatieaanduiding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitLocatieaanduiding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActiviteitLocatieaanduiding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitLocatieaanduiding" /> class.
        /// </summary>
        /// <param name="activiteitIdentificatie">&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="activiteitLocatieIdentificatie">&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="activiteitregelkwalificatie">activiteitregelkwalificatie (required).</param>
        /// <param name="gekwalificeerdeLocatieIdentificaties">&lt;body&gt;&lt;p&gt;Identificatie van de gekwalificeerde locaties.&lt;/p&gt;&lt;/body&gt; (required).</param>
        public ActiviteitLocatieaanduiding(string activiteitIdentificatie = default(string), string activiteitLocatieIdentificatie = default(string), Activiteitregelkwalificatie activiteitregelkwalificatie = default(Activiteitregelkwalificatie), List<string> gekwalificeerdeLocatieIdentificaties = default(List<string>))
        {
            // to ensure "activiteitIdentificatie" is required (not null)
            if (activiteitIdentificatie == null)
            {
                throw new InvalidDataException("activiteitIdentificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
            }
            else
            {
                this.ActiviteitIdentificatie = activiteitIdentificatie;
            }

            // to ensure "activiteitLocatieIdentificatie" is required (not null)
            if (activiteitLocatieIdentificatie == null)
            {
                throw new InvalidDataException("activiteitLocatieIdentificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
            }
            else
            {
                this.ActiviteitLocatieIdentificatie = activiteitLocatieIdentificatie;
            }

            // to ensure "activiteitregelkwalificatie" is required (not null)
            if (activiteitregelkwalificatie == null)
            {
                throw new InvalidDataException("activiteitregelkwalificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
            }
            else
            {
                this.Activiteitregelkwalificatie = activiteitregelkwalificatie;
            }

            // to ensure "gekwalificeerdeLocatieIdentificaties" is required (not null)
            if (gekwalificeerdeLocatieIdentificaties == null)
            {
                throw new InvalidDataException("gekwalificeerdeLocatieIdentificaties is a required property for ActiviteitLocatieaanduiding and cannot be null");
            }
            else
            {
                this.GekwalificeerdeLocatieIdentificaties = gekwalificeerdeLocatieIdentificaties;
            }

        }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="activiteitIdentificatie", EmitDefaultValue=true)]
        public string ActiviteitIdentificatie { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="activiteitLocatieIdentificatie", EmitDefaultValue=true)]
        public string ActiviteitLocatieIdentificatie { get; set; }

        /// <summary>
        /// Gets or Sets Activiteitregelkwalificatie
        /// </summary>
        [DataMember(Name="activiteitregelkwalificatie", EmitDefaultValue=true)]
        public Activiteitregelkwalificatie Activiteitregelkwalificatie { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie van de gekwalificeerde locaties.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie van de gekwalificeerde locaties.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="gekwalificeerdeLocatieIdentificaties", EmitDefaultValue=true)]
        public List<string> GekwalificeerdeLocatieIdentificaties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiviteitLocatieaanduiding {\n");
            sb.Append("  ActiviteitIdentificatie: ").Append(ActiviteitIdentificatie).Append("\n");
            sb.Append("  ActiviteitLocatieIdentificatie: ").Append(ActiviteitLocatieIdentificatie).Append("\n");
            sb.Append("  Activiteitregelkwalificatie: ").Append(Activiteitregelkwalificatie).Append("\n");
            sb.Append("  GekwalificeerdeLocatieIdentificaties: ").Append(GekwalificeerdeLocatieIdentificaties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiviteitLocatieaanduiding);
        }

        /// <summary>
        /// Returns true if ActiviteitLocatieaanduiding instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiviteitLocatieaanduiding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiviteitLocatieaanduiding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiviteitIdentificatie == input.ActiviteitIdentificatie ||
                    (this.ActiviteitIdentificatie != null &&
                    this.ActiviteitIdentificatie.Equals(input.ActiviteitIdentificatie))
                ) && 
                (
                    this.ActiviteitLocatieIdentificatie == input.ActiviteitLocatieIdentificatie ||
                    (this.ActiviteitLocatieIdentificatie != null &&
                    this.ActiviteitLocatieIdentificatie.Equals(input.ActiviteitLocatieIdentificatie))
                ) && 
                (
                    this.Activiteitregelkwalificatie == input.Activiteitregelkwalificatie ||
                    (this.Activiteitregelkwalificatie != null &&
                    this.Activiteitregelkwalificatie.Equals(input.Activiteitregelkwalificatie))
                ) && 
                (
                    this.GekwalificeerdeLocatieIdentificaties == input.GekwalificeerdeLocatieIdentificaties ||
                    this.GekwalificeerdeLocatieIdentificaties != null &&
                    input.GekwalificeerdeLocatieIdentificaties != null &&
                    this.GekwalificeerdeLocatieIdentificaties.SequenceEqual(input.GekwalificeerdeLocatieIdentificaties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiviteitIdentificatie != null)
                    hashCode = hashCode * 59 + this.ActiviteitIdentificatie.GetHashCode();
                if (this.ActiviteitLocatieIdentificatie != null)
                    hashCode = hashCode * 59 + this.ActiviteitLocatieIdentificatie.GetHashCode();
                if (this.Activiteitregelkwalificatie != null)
                    hashCode = hashCode * 59 + this.Activiteitregelkwalificatie.GetHashCode();
                if (this.GekwalificeerdeLocatieIdentificaties != null)
                    hashCode = hashCode * 59 + this.GekwalificeerdeLocatieIdentificaties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // ActiviteitIdentificatie (string) minLength
            if(this.ActiviteitIdentificatie != null && this.ActiviteitIdentificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActiviteitIdentificatie, length must be greater than 1.", new [] { "ActiviteitIdentificatie" });
            }
 

            // ActiviteitLocatieIdentificatie (string) minLength
            if(this.ActiviteitLocatieIdentificatie != null && this.ActiviteitLocatieIdentificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActiviteitLocatieIdentificatie, length must be greater than 1.", new [] { "ActiviteitLocatieIdentificatie" });
            }
 

 
            yield break;
        }
    }

}
