/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActiviteitHal
    /// </summary>
    [DataContract]
    public partial class ActiviteitHal :  IEquatable<ActiviteitHal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitHal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActiviteitHal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitHal" /> class.
        /// </summary>
        /// <param name="begindatum">&lt;body&gt;&lt;p&gt;Datum waarop de activiteit relevant werd.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="bovenliggendeActiviteitIdentificatie">&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="einddatum">&lt;body&gt;&lt;p&gt;Datum vanaf waarop de activiteit niet meer relevant was.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="gerelateerdeActiviteitIdentificaties">&lt;body&gt;&lt;p&gt;Identificatie van de gerelateerde activiteiten.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="groep">groep (required).</param>
        /// <param name="identificatie">&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="juridischeRegelVoorIedereenIdentificaties">&lt;body&gt;&lt;p&gt;Identificatie van de met de activiteit gerelateerde juridischeRegelsVoorIedereen.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="laatsteWijzigingsdatum">&lt;body&gt;&lt;p&gt;De laatste datum waarop, binnen het pakket, wijzigingen zijn aangebracht aan de activiteit.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="naam">&lt;body&gt;&lt;p&gt;Een (korte) omschrijving van de activiteit.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="links">links.</param>
        /// <param name="embedded">embedded.</param>
        public ActiviteitHal(DateTime begindatum = default(DateTime), string bovenliggendeActiviteitIdentificatie = default(string), DateTime einddatum = default(DateTime), List<string> gerelateerdeActiviteitIdentificaties = default(List<string>), Activiteitengroep groep = default(Activiteitengroep), string identificatie = default(string), List<string> juridischeRegelVoorIedereenIdentificaties = default(List<string>), DateTime laatsteWijzigingsdatum = default(DateTime), string naam = default(string), ActiviteitLinks links = default(ActiviteitLinks), ActiviteitEmbedded embedded = default(ActiviteitEmbedded))
        {
            // to ensure "bovenliggendeActiviteitIdentificatie" is required (not null)
            if (bovenliggendeActiviteitIdentificatie == null)
            {
                throw new InvalidDataException("bovenliggendeActiviteitIdentificatie is a required property for ActiviteitHal and cannot be null");
            }
            else
            {
                this.BovenliggendeActiviteitIdentificatie = bovenliggendeActiviteitIdentificatie;
            }

            // to ensure "groep" is required (not null)
            if (groep == null)
            {
                throw new InvalidDataException("groep is a required property for ActiviteitHal and cannot be null");
            }
            else
            {
                this.Groep = groep;
            }

            // to ensure "identificatie" is required (not null)
            if (identificatie == null)
            {
                throw new InvalidDataException("identificatie is a required property for ActiviteitHal and cannot be null");
            }
            else
            {
                this.Identificatie = identificatie;
            }

            // to ensure "juridischeRegelVoorIedereenIdentificaties" is required (not null)
            if (juridischeRegelVoorIedereenIdentificaties == null)
            {
                throw new InvalidDataException("juridischeRegelVoorIedereenIdentificaties is a required property for ActiviteitHal and cannot be null");
            }
            else
            {
                this.JuridischeRegelVoorIedereenIdentificaties = juridischeRegelVoorIedereenIdentificaties;
            }

            // to ensure "naam" is required (not null)
            if (naam == null)
            {
                throw new InvalidDataException("naam is a required property for ActiviteitHal and cannot be null");
            }
            else
            {
                this.Naam = naam;
            }

            this.Begindatum = begindatum;
            this.Einddatum = einddatum;
            this.GerelateerdeActiviteitIdentificaties = gerelateerdeActiviteitIdentificaties;
            this.LaatsteWijzigingsdatum = laatsteWijzigingsdatum;
            this.Links = links;
            this.Embedded = embedded;
        }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Datum waarop de activiteit relevant werd.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Datum waarop de activiteit relevant werd.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="begindatum", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Begindatum { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="bovenliggendeActiviteitIdentificatie", EmitDefaultValue=true)]
        public string BovenliggendeActiviteitIdentificatie { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Datum vanaf waarop de activiteit niet meer relevant was.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Datum vanaf waarop de activiteit niet meer relevant was.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="einddatum", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Einddatum { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie van de gerelateerde activiteiten.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie van de gerelateerde activiteiten.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="gerelateerdeActiviteitIdentificaties", EmitDefaultValue=false)]
        public List<string> GerelateerdeActiviteitIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets Groep
        /// </summary>
        [DataMember(Name="groep", EmitDefaultValue=true)]
        public Activiteitengroep Groep { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie datatype van Geonovum.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="identificatie", EmitDefaultValue=true)]
        public string Identificatie { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie van de met de activiteit gerelateerde juridischeRegelsVoorIedereen.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie van de met de activiteit gerelateerde juridischeRegelsVoorIedereen.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="juridischeRegelVoorIedereenIdentificaties", EmitDefaultValue=true)]
        public List<string> JuridischeRegelVoorIedereenIdentificaties { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;De laatste datum waarop, binnen het pakket, wijzigingen zijn aangebracht aan de activiteit.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;De laatste datum waarop, binnen het pakket, wijzigingen zijn aangebracht aan de activiteit.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="laatsteWijzigingsdatum", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LaatsteWijzigingsdatum { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Een (korte) omschrijving van de activiteit.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Een (korte) omschrijving van de activiteit.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="naam", EmitDefaultValue=true)]
        public string Naam { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public ActiviteitLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>
        [DataMember(Name="_embedded", EmitDefaultValue=false)]
        public ActiviteitEmbedded Embedded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiviteitHal {\n");
            sb.Append("  Begindatum: ").Append(Begindatum).Append("\n");
            sb.Append("  BovenliggendeActiviteitIdentificatie: ").Append(BovenliggendeActiviteitIdentificatie).Append("\n");
            sb.Append("  Einddatum: ").Append(Einddatum).Append("\n");
            sb.Append("  GerelateerdeActiviteitIdentificaties: ").Append(GerelateerdeActiviteitIdentificaties).Append("\n");
            sb.Append("  Groep: ").Append(Groep).Append("\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("  JuridischeRegelVoorIedereenIdentificaties: ").Append(JuridischeRegelVoorIedereenIdentificaties).Append("\n");
            sb.Append("  LaatsteWijzigingsdatum: ").Append(LaatsteWijzigingsdatum).Append("\n");
            sb.Append("  Naam: ").Append(Naam).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiviteitHal);
        }

        /// <summary>
        /// Returns true if ActiviteitHal instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiviteitHal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiviteitHal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Begindatum == input.Begindatum ||
                    (this.Begindatum != null &&
                    this.Begindatum.Equals(input.Begindatum))
                ) && 
                (
                    this.BovenliggendeActiviteitIdentificatie == input.BovenliggendeActiviteitIdentificatie ||
                    (this.BovenliggendeActiviteitIdentificatie != null &&
                    this.BovenliggendeActiviteitIdentificatie.Equals(input.BovenliggendeActiviteitIdentificatie))
                ) && 
                (
                    this.Einddatum == input.Einddatum ||
                    (this.Einddatum != null &&
                    this.Einddatum.Equals(input.Einddatum))
                ) && 
                (
                    this.GerelateerdeActiviteitIdentificaties == input.GerelateerdeActiviteitIdentificaties ||
                    this.GerelateerdeActiviteitIdentificaties != null &&
                    input.GerelateerdeActiviteitIdentificaties != null &&
                    this.GerelateerdeActiviteitIdentificaties.SequenceEqual(input.GerelateerdeActiviteitIdentificaties)
                ) && 
                (
                    this.Groep == input.Groep ||
                    (this.Groep != null &&
                    this.Groep.Equals(input.Groep))
                ) && 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                ) && 
                (
                    this.JuridischeRegelVoorIedereenIdentificaties == input.JuridischeRegelVoorIedereenIdentificaties ||
                    this.JuridischeRegelVoorIedereenIdentificaties != null &&
                    input.JuridischeRegelVoorIedereenIdentificaties != null &&
                    this.JuridischeRegelVoorIedereenIdentificaties.SequenceEqual(input.JuridischeRegelVoorIedereenIdentificaties)
                ) && 
                (
                    this.LaatsteWijzigingsdatum == input.LaatsteWijzigingsdatum ||
                    (this.LaatsteWijzigingsdatum != null &&
                    this.LaatsteWijzigingsdatum.Equals(input.LaatsteWijzigingsdatum))
                ) && 
                (
                    this.Naam == input.Naam ||
                    (this.Naam != null &&
                    this.Naam.Equals(input.Naam))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Embedded == input.Embedded ||
                    (this.Embedded != null &&
                    this.Embedded.Equals(input.Embedded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Begindatum != null)
                    hashCode = hashCode * 59 + this.Begindatum.GetHashCode();
                if (this.BovenliggendeActiviteitIdentificatie != null)
                    hashCode = hashCode * 59 + this.BovenliggendeActiviteitIdentificatie.GetHashCode();
                if (this.Einddatum != null)
                    hashCode = hashCode * 59 + this.Einddatum.GetHashCode();
                if (this.GerelateerdeActiviteitIdentificaties != null)
                    hashCode = hashCode * 59 + this.GerelateerdeActiviteitIdentificaties.GetHashCode();
                if (this.Groep != null)
                    hashCode = hashCode * 59 + this.Groep.GetHashCode();
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                if (this.JuridischeRegelVoorIedereenIdentificaties != null)
                    hashCode = hashCode * 59 + this.JuridischeRegelVoorIedereenIdentificaties.GetHashCode();
                if (this.LaatsteWijzigingsdatum != null)
                    hashCode = hashCode * 59 + this.LaatsteWijzigingsdatum.GetHashCode();
                if (this.Naam != null)
                    hashCode = hashCode * 59 + this.Naam.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Embedded != null)
                    hashCode = hashCode * 59 + this.Embedded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // BovenliggendeActiviteitIdentificatie (string) minLength
            if(this.BovenliggendeActiviteitIdentificatie != null && this.BovenliggendeActiviteitIdentificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BovenliggendeActiviteitIdentificatie, length must be greater than 1.", new [] { "BovenliggendeActiviteitIdentificatie" });
            }
 

 

            // Identificatie (string) minLength
            if(this.Identificatie != null && this.Identificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identificatie, length must be greater than 1.", new [] { "Identificatie" });
            }
 

 

            // Naam (string) minLength
            if(this.Naam != null && this.Naam.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Naam, length must be greater than 1.", new [] { "Naam" });
            }
 
            yield break;
        }
    }

}
