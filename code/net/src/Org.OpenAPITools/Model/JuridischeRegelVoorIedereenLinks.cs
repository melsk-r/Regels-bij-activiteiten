/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JuridischeRegelVoorIedereenLinks
    /// </summary>
    [DataContract]
    public partial class JuridischeRegelVoorIedereenLinks :  IEquatable<JuridischeRegelVoorIedereenLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JuridischeRegelVoorIedereenLinks" /> class.
        /// </summary>
        /// <param name="self">self.</param>
        /// <param name="gedefinieerdeLocaties">&lt;body&gt;&lt;p&gt;De locatieaanduiding begrenst de juridische werking van de regel in juridische zin, te weten dat de regel alleen binnen dit werkingsgebied werkingskracht heeft.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="regeltekst">regeltekst.</param>
        /// <param name="gekwalificeerdeLocaties">&lt;body&gt;&lt;p&gt;De locatie die gekwalificeerd wordt door de regel die aangeeft of een activiteit daar plaats mag vinden of niet, en welke voorwaarden hier aan verbonden zijn.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="activiteiten">&lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;.</param>
        public JuridischeRegelVoorIedereenLinks(HalLink self = default(HalLink), List<HalLink> gedefinieerdeLocaties = default(List<HalLink>), Object regeltekst = default(Object), List<HalLink> gekwalificeerdeLocaties = default(List<HalLink>), List<HalLink> activiteiten = default(List<HalLink>))
        {
            this.Self = self;
            this.GedefinieerdeLocaties = gedefinieerdeLocaties;
            this.Regeltekst = regeltekst;
            this.GekwalificeerdeLocaties = gekwalificeerdeLocaties;
            this.Activiteiten = activiteiten;
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public HalLink Self { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;De locatieaanduiding begrenst de juridische werking van de regel in juridische zin, te weten dat de regel alleen binnen dit werkingsgebied werkingskracht heeft.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;De locatieaanduiding begrenst de juridische werking van de regel in juridische zin, te weten dat de regel alleen binnen dit werkingsgebied werkingskracht heeft.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="gedefinieerdeLocaties", EmitDefaultValue=false)]
        public List<HalLink> GedefinieerdeLocaties { get; set; }

        /// <summary>
        /// Gets or Sets Regeltekst
        /// </summary>
        [DataMember(Name="regeltekst", EmitDefaultValue=false)]
        public Object Regeltekst { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;De locatie die gekwalificeerd wordt door de regel die aangeeft of een activiteit daar plaats mag vinden of niet, en welke voorwaarden hier aan verbonden zijn.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;De locatie die gekwalificeerd wordt door de regel die aangeeft of een activiteit daar plaats mag vinden of niet, en welke voorwaarden hier aan verbonden zijn.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="gekwalificeerdeLocaties", EmitDefaultValue=false)]
        public List<HalLink> GekwalificeerdeLocaties { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="activiteiten", EmitDefaultValue=false)]
        public List<HalLink> Activiteiten { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JuridischeRegelVoorIedereenLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  GedefinieerdeLocaties: ").Append(GedefinieerdeLocaties).Append("\n");
            sb.Append("  Regeltekst: ").Append(Regeltekst).Append("\n");
            sb.Append("  GekwalificeerdeLocaties: ").Append(GekwalificeerdeLocaties).Append("\n");
            sb.Append("  Activiteiten: ").Append(Activiteiten).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JuridischeRegelVoorIedereenLinks);
        }

        /// <summary>
        /// Returns true if JuridischeRegelVoorIedereenLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of JuridischeRegelVoorIedereenLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JuridischeRegelVoorIedereenLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.GedefinieerdeLocaties == input.GedefinieerdeLocaties ||
                    this.GedefinieerdeLocaties != null &&
                    input.GedefinieerdeLocaties != null &&
                    this.GedefinieerdeLocaties.SequenceEqual(input.GedefinieerdeLocaties)
                ) && 
                (
                    this.Regeltekst == input.Regeltekst ||
                    (this.Regeltekst != null &&
                    this.Regeltekst.Equals(input.Regeltekst))
                ) && 
                (
                    this.GekwalificeerdeLocaties == input.GekwalificeerdeLocaties ||
                    this.GekwalificeerdeLocaties != null &&
                    input.GekwalificeerdeLocaties != null &&
                    this.GekwalificeerdeLocaties.SequenceEqual(input.GekwalificeerdeLocaties)
                ) && 
                (
                    this.Activiteiten == input.Activiteiten ||
                    this.Activiteiten != null &&
                    input.Activiteiten != null &&
                    this.Activiteiten.SequenceEqual(input.Activiteiten)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.GedefinieerdeLocaties != null)
                    hashCode = hashCode * 59 + this.GedefinieerdeLocaties.GetHashCode();
                if (this.Regeltekst != null)
                    hashCode = hashCode * 59 + this.Regeltekst.GetHashCode();
                if (this.GekwalificeerdeLocaties != null)
                    hashCode = hashCode * 59 + this.GekwalificeerdeLocaties.GetHashCode();
                if (this.Activiteiten != null)
                    hashCode = hashCode * 59 + this.Activiteiten.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 

 

 
            yield break;
        }
    }

}
