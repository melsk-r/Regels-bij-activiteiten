/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Metagegevens, conform de STOP-standaard, van de regeltekst.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract]
    public partial class DocumentComponent :  IEquatable<DocumentComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentComponent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentComponent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentComponent" /> class.
        /// </summary>
        /// <param name="identificatie">&lt;body&gt;&lt;p&gt;Identificatie datatype van de KOOP standaard.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="kop">kop (required).</param>
        /// <param name="omgevingsdocument">omgevingsdocument (required).</param>
        /// <param name="type">&lt;body&gt;&lt;p&gt;De aanduiding van het type regeling van het omgevingsdocument.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="vervallen">&lt;body&gt;&lt;p&gt;Indicatie dat de regeltekst is vervallen.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="volgordeNummer">&lt;body&gt;&lt;p&gt;Het lidnummer indien de regeltekst een lid van een artikel betreft.&lt;/p&gt;&lt;/body&gt; (required).</param>
        public DocumentComponent(string identificatie = default(string), Kop kop = default(Kop), Omgevingsdocument omgevingsdocument = default(Omgevingsdocument), string type = default(string), bool vervallen = default(bool), int volgordeNummer = default(int))
        {
            // to ensure "identificatie" is required (not null)
            if (identificatie == null)
            {
                throw new InvalidDataException("identificatie is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.Identificatie = identificatie;
            }

            // to ensure "kop" is required (not null)
            if (kop == null)
            {
                throw new InvalidDataException("kop is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.Kop = kop;
            }

            // to ensure "omgevingsdocument" is required (not null)
            if (omgevingsdocument == null)
            {
                throw new InvalidDataException("omgevingsdocument is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.Omgevingsdocument = omgevingsdocument;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "vervallen" is required (not null)
            if (vervallen == null)
            {
                throw new InvalidDataException("vervallen is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.Vervallen = vervallen;
            }

            // to ensure "volgordeNummer" is required (not null)
            if (volgordeNummer == null)
            {
                throw new InvalidDataException("volgordeNummer is a required property for DocumentComponent and cannot be null");
            }
            else
            {
                this.VolgordeNummer = volgordeNummer;
            }

        }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificatie datatype van de KOOP standaard.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificatie datatype van de KOOP standaard.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="identificatie", EmitDefaultValue=true)]
        public string Identificatie { get; set; }

        /// <summary>
        /// Gets or Sets Kop
        /// </summary>
        [DataMember(Name="kop", EmitDefaultValue=true)]
        public Kop Kop { get; set; }

        /// <summary>
        /// Gets or Sets Omgevingsdocument
        /// </summary>
        [DataMember(Name="omgevingsdocument", EmitDefaultValue=true)]
        public Omgevingsdocument Omgevingsdocument { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;De aanduiding van het type regeling van het omgevingsdocument.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;De aanduiding van het type regeling van het omgevingsdocument.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Indicatie dat de regeltekst is vervallen.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Indicatie dat de regeltekst is vervallen.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="vervallen", EmitDefaultValue=true)]
        public bool Vervallen { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Het lidnummer indien de regeltekst een lid van een artikel betreft.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Het lidnummer indien de regeltekst een lid van een artikel betreft.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="volgordeNummer", EmitDefaultValue=true)]
        public int VolgordeNummer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentComponent {\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("  Kop: ").Append(Kop).Append("\n");
            sb.Append("  Omgevingsdocument: ").Append(Omgevingsdocument).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Vervallen: ").Append(Vervallen).Append("\n");
            sb.Append("  VolgordeNummer: ").Append(VolgordeNummer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentComponent);
        }

        /// <summary>
        /// Returns true if DocumentComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                ) && 
                (
                    this.Kop == input.Kop ||
                    (this.Kop != null &&
                    this.Kop.Equals(input.Kop))
                ) && 
                (
                    this.Omgevingsdocument == input.Omgevingsdocument ||
                    (this.Omgevingsdocument != null &&
                    this.Omgevingsdocument.Equals(input.Omgevingsdocument))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Vervallen == input.Vervallen ||
                    (this.Vervallen != null &&
                    this.Vervallen.Equals(input.Vervallen))
                ) && 
                (
                    this.VolgordeNummer == input.VolgordeNummer ||
                    (this.VolgordeNummer != null &&
                    this.VolgordeNummer.Equals(input.VolgordeNummer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                if (this.Kop != null)
                    hashCode = hashCode * 59 + this.Kop.GetHashCode();
                if (this.Omgevingsdocument != null)
                    hashCode = hashCode * 59 + this.Omgevingsdocument.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Vervallen != null)
                    hashCode = hashCode * 59 + this.Vervallen.GetHashCode();
                if (this.VolgordeNummer != null)
                    hashCode = hashCode * 59 + this.VolgordeNummer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Identificatie (string) minLength
            if(this.Identificatie != null && this.Identificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identificatie, length must be greater than 1.", new [] { "Identificatie" });
            }
 

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }
 
            yield break;
        }
    }

}
