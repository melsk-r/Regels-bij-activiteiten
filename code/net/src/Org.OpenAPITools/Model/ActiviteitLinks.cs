/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActiviteitLinks
    /// </summary>
    [DataContract]
    public partial class ActiviteitLinks :  IEquatable<ActiviteitLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitLinks" /> class.
        /// </summary>
        /// <param name="self">self.</param>
        /// <param name="gerelateerdeActiviteiten">&lt;body&gt;&lt;p&gt;De regels die gelden voor de gerelateerde activiteit(en) zijn contextueel relevant voor deze activiteit. Toelichting: Met contextueel relevant wordt bedoeld dat de regels die gelden voor de gerelateerde activiteit, binnen die gegeven context ook gelden voor deze activiteit. Bijvoorbeeld omdat de ene activiteit altijd samen met de andere activiteit(en) worden uitgevoerd en de regels van beide daarmee allebei tegelijk aan de orde zijn. Als de beschreven context waarin de regels behorende bij de gerelateerde activiteit gelden niet aan de orde is, dan gelden de regels van de gerelateerde activiteit niet. Of de context aan de orde is, is niet opgenomen als informatie. Deze relatie geeft daarom, informatiekundig gezien, aan dat elke regel die geldt voor de gerelateerde activiteit relevant kan zijn voor het uitvoeren van deze activiteit. Gerelateerde activiteiten kunnen van hetzelfde type zijn, bijvoorbeeld twee milieubelastende activiteiten, maar dat hoeft niet.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="bovenliggendeActiviteit">bovenliggendeActiviteit.</param>
        /// <param name="juridischeRegelsVoorIedereen">&lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;.</param>
        public ActiviteitLinks(HalLink self = default(HalLink), List<HalLink> gerelateerdeActiviteiten = default(List<HalLink>), Object bovenliggendeActiviteit = default(Object), List<HalLink> juridischeRegelsVoorIedereen = default(List<HalLink>))
        {
            this.Self = self;
            this.GerelateerdeActiviteiten = gerelateerdeActiviteiten;
            this.BovenliggendeActiviteit = bovenliggendeActiviteit;
            this.JuridischeRegelsVoorIedereen = juridischeRegelsVoorIedereen;
        }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public HalLink Self { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;De regels die gelden voor de gerelateerde activiteit(en) zijn contextueel relevant voor deze activiteit. Toelichting: Met contextueel relevant wordt bedoeld dat de regels die gelden voor de gerelateerde activiteit, binnen die gegeven context ook gelden voor deze activiteit. Bijvoorbeeld omdat de ene activiteit altijd samen met de andere activiteit(en) worden uitgevoerd en de regels van beide daarmee allebei tegelijk aan de orde zijn. Als de beschreven context waarin de regels behorende bij de gerelateerde activiteit gelden niet aan de orde is, dan gelden de regels van de gerelateerde activiteit niet. Of de context aan de orde is, is niet opgenomen als informatie. Deze relatie geeft daarom, informatiekundig gezien, aan dat elke regel die geldt voor de gerelateerde activiteit relevant kan zijn voor het uitvoeren van deze activiteit. Gerelateerde activiteiten kunnen van hetzelfde type zijn, bijvoorbeeld twee milieubelastende activiteiten, maar dat hoeft niet.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;De regels die gelden voor de gerelateerde activiteit(en) zijn contextueel relevant voor deze activiteit. Toelichting: Met contextueel relevant wordt bedoeld dat de regels die gelden voor de gerelateerde activiteit, binnen die gegeven context ook gelden voor deze activiteit. Bijvoorbeeld omdat de ene activiteit altijd samen met de andere activiteit(en) worden uitgevoerd en de regels van beide daarmee allebei tegelijk aan de orde zijn. Als de beschreven context waarin de regels behorende bij de gerelateerde activiteit gelden niet aan de orde is, dan gelden de regels van de gerelateerde activiteit niet. Of de context aan de orde is, is niet opgenomen als informatie. Deze relatie geeft daarom, informatiekundig gezien, aan dat elke regel die geldt voor de gerelateerde activiteit relevant kan zijn voor het uitvoeren van deze activiteit. Gerelateerde activiteiten kunnen van hetzelfde type zijn, bijvoorbeeld twee milieubelastende activiteiten, maar dat hoeft niet.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="gerelateerdeActiviteiten", EmitDefaultValue=false)]
        public List<HalLink> GerelateerdeActiviteiten { get; set; }

        /// <summary>
        /// Gets or Sets BovenliggendeActiviteit
        /// </summary>
        [DataMember(Name="bovenliggendeActiviteit", EmitDefaultValue=false)]
        public Object BovenliggendeActiviteit { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Bij een regel die een activiteit vastlegt geeft deze relatie aan om welke activiteit het gaat. De bijbehorende locatie(s) waar het om gaat is/zijn bij de activiteit zelf te vinden.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name="juridischeRegelsVoorIedereen", EmitDefaultValue=false)]
        public List<HalLink> JuridischeRegelsVoorIedereen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiviteitLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  GerelateerdeActiviteiten: ").Append(GerelateerdeActiviteiten).Append("\n");
            sb.Append("  BovenliggendeActiviteit: ").Append(BovenliggendeActiviteit).Append("\n");
            sb.Append("  JuridischeRegelsVoorIedereen: ").Append(JuridischeRegelsVoorIedereen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiviteitLinks);
        }

        /// <summary>
        /// Returns true if ActiviteitLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiviteitLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiviteitLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.GerelateerdeActiviteiten == input.GerelateerdeActiviteiten ||
                    this.GerelateerdeActiviteiten != null &&
                    input.GerelateerdeActiviteiten != null &&
                    this.GerelateerdeActiviteiten.SequenceEqual(input.GerelateerdeActiviteiten)
                ) && 
                (
                    this.BovenliggendeActiviteit == input.BovenliggendeActiviteit ||
                    (this.BovenliggendeActiviteit != null &&
                    this.BovenliggendeActiviteit.Equals(input.BovenliggendeActiviteit))
                ) && 
                (
                    this.JuridischeRegelsVoorIedereen == input.JuridischeRegelsVoorIedereen ||
                    this.JuridischeRegelsVoorIedereen != null &&
                    input.JuridischeRegelsVoorIedereen != null &&
                    this.JuridischeRegelsVoorIedereen.SequenceEqual(input.JuridischeRegelsVoorIedereen)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.GerelateerdeActiviteiten != null)
                    hashCode = hashCode * 59 + this.GerelateerdeActiviteiten.GetHashCode();
                if (this.BovenliggendeActiviteit != null)
                    hashCode = hashCode * 59 + this.BovenliggendeActiviteit.GetHashCode();
                if (this.JuridischeRegelsVoorIedereen != null)
                    hashCode = hashCode * 59 + this.JuridischeRegelsVoorIedereen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            yield break;
        }
    }

}
