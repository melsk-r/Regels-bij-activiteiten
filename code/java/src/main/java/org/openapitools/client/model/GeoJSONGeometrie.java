/*
 * Regels bij activiteiten
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.LinestringGeoJSON;
import org.openapitools.client.model.MultilinestringGeoJSON;
import org.openapitools.client.model.MultipointGeoJSON;
import org.openapitools.client.model.MultipolygonGeoJSON;
import org.openapitools.client.model.PointGeoJSON;
import org.openapitools.client.model.PolygonGeoJSON;

/**
 * Geometrie in GeoJSON formaat (RFC 7946). Een property die dit datatype heeft mag slechts 1 van de opgenomen properties bevatten. Deze constructie vervangt de oneOf vanwege codegeneratie-issues.
 */
@ApiModel(description = "Geometrie in GeoJSON formaat (RFC 7946). Een property die dit datatype heeft mag slechts 1 van de opgenomen properties bevatten. Deze constructie vervangt de oneOf vanwege codegeneratie-issues.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-07-16T14:41:30.043160Z[Etc/UTC]")
public class GeoJSONGeometrie {
  public static final String SERIALIZED_NAME_POINT = "point";
  @SerializedName(SERIALIZED_NAME_POINT)
  private PointGeoJSON point;

  public static final String SERIALIZED_NAME_LINE_STRING = "lineString";
  @SerializedName(SERIALIZED_NAME_LINE_STRING)
  private LinestringGeoJSON lineString;

  public static final String SERIALIZED_NAME_POLYGON = "polygon";
  @SerializedName(SERIALIZED_NAME_POLYGON)
  private PolygonGeoJSON polygon;

  public static final String SERIALIZED_NAME_MULTI_POINT = "multiPoint";
  @SerializedName(SERIALIZED_NAME_MULTI_POINT)
  private MultipointGeoJSON multiPoint;

  public static final String SERIALIZED_NAME_MULTI_LINE_STRING = "multiLineString";
  @SerializedName(SERIALIZED_NAME_MULTI_LINE_STRING)
  private MultilinestringGeoJSON multiLineString;

  public static final String SERIALIZED_NAME_MULTI_POLYGON = "multiPolygon";
  @SerializedName(SERIALIZED_NAME_MULTI_POLYGON)
  private MultipolygonGeoJSON multiPolygon;


  public GeoJSONGeometrie point(PointGeoJSON point) {
    
    this.point = point;
    return this;
  }

   /**
   * Get point
   * @return point
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PointGeoJSON getPoint() {
    return point;
  }


  public void setPoint(PointGeoJSON point) {
    this.point = point;
  }


  public GeoJSONGeometrie lineString(LinestringGeoJSON lineString) {
    
    this.lineString = lineString;
    return this;
  }

   /**
   * Get lineString
   * @return lineString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LinestringGeoJSON getLineString() {
    return lineString;
  }


  public void setLineString(LinestringGeoJSON lineString) {
    this.lineString = lineString;
  }


  public GeoJSONGeometrie polygon(PolygonGeoJSON polygon) {
    
    this.polygon = polygon;
    return this;
  }

   /**
   * Get polygon
   * @return polygon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PolygonGeoJSON getPolygon() {
    return polygon;
  }


  public void setPolygon(PolygonGeoJSON polygon) {
    this.polygon = polygon;
  }


  public GeoJSONGeometrie multiPoint(MultipointGeoJSON multiPoint) {
    
    this.multiPoint = multiPoint;
    return this;
  }

   /**
   * Get multiPoint
   * @return multiPoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MultipointGeoJSON getMultiPoint() {
    return multiPoint;
  }


  public void setMultiPoint(MultipointGeoJSON multiPoint) {
    this.multiPoint = multiPoint;
  }


  public GeoJSONGeometrie multiLineString(MultilinestringGeoJSON multiLineString) {
    
    this.multiLineString = multiLineString;
    return this;
  }

   /**
   * Get multiLineString
   * @return multiLineString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MultilinestringGeoJSON getMultiLineString() {
    return multiLineString;
  }


  public void setMultiLineString(MultilinestringGeoJSON multiLineString) {
    this.multiLineString = multiLineString;
  }


  public GeoJSONGeometrie multiPolygon(MultipolygonGeoJSON multiPolygon) {
    
    this.multiPolygon = multiPolygon;
    return this;
  }

   /**
   * Get multiPolygon
   * @return multiPolygon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MultipolygonGeoJSON getMultiPolygon() {
    return multiPolygon;
  }


  public void setMultiPolygon(MultipolygonGeoJSON multiPolygon) {
    this.multiPolygon = multiPolygon;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoJSONGeometrie geoJSONGeometrie = (GeoJSONGeometrie) o;
    return Objects.equals(this.point, geoJSONGeometrie.point) &&
        Objects.equals(this.lineString, geoJSONGeometrie.lineString) &&
        Objects.equals(this.polygon, geoJSONGeometrie.polygon) &&
        Objects.equals(this.multiPoint, geoJSONGeometrie.multiPoint) &&
        Objects.equals(this.multiLineString, geoJSONGeometrie.multiLineString) &&
        Objects.equals(this.multiPolygon, geoJSONGeometrie.multiPolygon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(point, lineString, polygon, multiPoint, multiLineString, multiPolygon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoJSONGeometrie {\n");
    sb.append("    point: ").append(toIndentedString(point)).append("\n");
    sb.append("    lineString: ").append(toIndentedString(lineString)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("    multiPoint: ").append(toIndentedString(multiPoint)).append("\n");
    sb.append("    multiLineString: ").append(toIndentedString(multiLineString)).append("\n");
    sb.append("    multiPolygon: ").append(toIndentedString(multiPolygon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

