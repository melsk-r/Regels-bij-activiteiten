/*
 * Regels bij activiteiten
 *
 * <body><p>Deze API maakt het mogelijk om gegevens op te vragen, bij een applicatie die invulling geeft aan de Omgevingswetbeleidcomponent, ook wel aangeduid als plansoftware, over (Omgevingswet-)activiteiten en/of (bijbehorende) juridische regels, regelteksten en locaties.</p></body>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Groepelement dat is bedoeld voor het coderen van koppen (als lopende tekst).&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "Kop")]
    public partial class Kop : IEquatable<Kop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kop" /> class.
        /// </summary>
        /// <param name="label">&lt;body&gt;&lt;p&gt;Een label voor een kop-structuur, bijvoorbeeld &#x60;Artikel&#x60;.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="nummer">&lt;body&gt;&lt;p&gt;Identificeert een nummer of andere aanduiding voor een kop-structuur, bijvoorbeeld &#x60;3.2&#x60;.&lt;/p&gt;&lt;/body&gt;.</param>
        /// <param name="opschrift">&lt;body&gt;&lt;p&gt;Bevat het opschrift (de titel) binnen een kop-structuur, bijvoorbeeld de naam van het artikel.&lt;/p&gt;&lt;/body&gt;.</param>
        public Kop(string label = default(string), string nummer = default(string), string opschrift = default(string))
        {
            this.Label = label;
            this.Nummer = nummer;
            this.Opschrift = opschrift;
        }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Een label voor een kop-structuur, bijvoorbeeld &#x60;Artikel&#x60;.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Een label voor een kop-structuur, bijvoorbeeld &#x60;Artikel&#x60;.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Identificeert een nummer of andere aanduiding voor een kop-structuur, bijvoorbeeld &#x60;3.2&#x60;.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Identificeert een nummer of andere aanduiding voor een kop-structuur, bijvoorbeeld &#x60;3.2&#x60;.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "nummer", EmitDefaultValue = false)]
        public string Nummer { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Bevat het opschrift (de titel) binnen een kop-structuur, bijvoorbeeld de naam van het artikel.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Bevat het opschrift (de titel) binnen een kop-structuur, bijvoorbeeld de naam van het artikel.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "opschrift", EmitDefaultValue = false)]
        public string Opschrift { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kop {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Nummer: ").Append(Nummer).Append("\n");
            sb.Append("  Opschrift: ").Append(Opschrift).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kop);
        }

        /// <summary>
        /// Returns true if Kop instances are equal
        /// </summary>
        /// <param name="input">Instance of Kop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kop input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Nummer == input.Nummer ||
                    (this.Nummer != null &&
                    this.Nummer.Equals(input.Nummer))
                ) && 
                (
                    this.Opschrift == input.Opschrift ||
                    (this.Opschrift != null &&
                    this.Opschrift.Equals(input.Opschrift))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Nummer != null)
                    hashCode = hashCode * 59 + this.Nummer.GetHashCode();
                if (this.Opschrift != null)
                    hashCode = hashCode * 59 + this.Opschrift.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
